#!/bin/bash

# ============================================
# VCBL Chatbot - ÌÜµÌï© Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
# ============================================
# Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Google CloudÏóê VCBL ChatbotÏùÑ Î∞∞Ìè¨ÌïòÍ∏∞ ÏúÑÌïú
# Î™®Îì† ÏÑ§Ï†ïÍ≥º ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏûêÎèôÏúºÎ°ú Íµ¨ÏÑ±Ìï©ÎãàÎã§.
# 
# ÏÇ¨Ïö©Î≤ï:
#   ./deploy-unified.sh [--quick] [--full-setup]
#   --quick: Îπ†Î•∏ Î∞∞Ìè¨ (Í∏∞Ï°¥ ÏÑ§Ï†ï ÏÇ¨Ïö©)
#   --full-setup: ÏôÑÏ†ÑÌïú Ï¥àÍ∏∞ ÏÑ§Ï†ïÎ∂ÄÌÑ∞ Î∞∞Ìè¨ÍπåÏßÄ

set -e  # Ïò§Î•ò Î∞úÏÉù Ïãú Ïä§ÌÅ¨Î¶ΩÌä∏ Ï§ëÎã®

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Î°úÍ∑∏ Ìï®ÏàòÎì§
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ìó§Îçî Ï∂úÎ†•
echo "============================================"
echo "üöÄ VCBL Chatbot - ÌÜµÌï© Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏"
echo "============================================"
echo ""

# ============================================
# 1. Î™ÖÎ†πÌñâ Ïù∏Ïàò Ï≤òÎ¶¨
# ============================================

QUICK_MODE=false
FULL_SETUP=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --quick)
            QUICK_MODE=true
            shift
            ;;
        --full-setup)
            FULL_SETUP=true
            shift
            ;;
        -h|--help)
            echo "ÏÇ¨Ïö©Î≤ï: $0 [ÏòµÏÖò]"
            echo ""
            echo "ÏòµÏÖò:"
            echo "  --quick        Îπ†Î•∏ Î∞∞Ìè¨ (Í∏∞Ï°¥ ÏÑ§Ï†ï ÏÇ¨Ïö©)"
            echo "  --full-setup   ÏôÑÏ†ÑÌïú Ï¥àÍ∏∞ ÏÑ§Ï†ïÎ∂ÄÌÑ∞ Î∞∞Ìè¨ÍπåÏßÄ"
            echo "  -h, --help     ÎèÑÏõÄÎßê ÌëúÏãú"
            echo ""
            echo "ÏòàÏãú:"
            echo "  $0 --quick        # Îπ†Î•∏ Î∞∞Ìè¨"
            echo "  $0 --full-setup   # ÏôÑÏ†Ñ ÏÑ§Ï†ï"
            echo "  $0                # ÎåÄÌôîÌòï Î™®Îìú"
            exit 0
            ;;
        *)
            log_error "Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1"
            echo "ÏÇ¨Ïö©Î≤ï: $0 [--quick] [--full-setup] [-h]"
            exit 1
            ;;
    esac
done

# ============================================
# 2. ÏÇ¨Ï†Ñ Ï†êÍ≤Ä Î∞è ÏÑ§Ï†ï
# ============================================

log_info "1. ÏÇ¨Ï†Ñ Ï†êÍ≤Ä Î∞è ÏÑ§Ï†ï ÏãúÏûë..."

# gcloud CLI ÏÑ§Ïπò ÌôïÏù∏
if ! command -v gcloud &> /dev/null; then
    log_error "gcloud CLIÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
    echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÏÑ§ÏπòÌïòÏÑ∏Ïöî:"
    echo "curl https://sdk.cloud.google.com | bash"
    exit 1
fi

# Docker ÏÑ§Ïπò ÌôïÏù∏
if ! command -v docker &> /dev/null; then
    log_error "DockerÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
    echo "DockerÎ•º ÏÑ§ÏπòÌïòÍ≥† Ïã§ÌñâÌïòÏÑ∏Ïöî."
    exit 1
fi

# gcloud Ïù∏Ï¶ù ÌôïÏù∏
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    log_warning "gcloud Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
    gcloud auth login
fi

log_success "ÏÇ¨Ï†Ñ Ï†êÍ≤Ä ÏôÑÎ£å"

# ============================================
# Í≥µÌÜµ Ïú†Ìã∏: ÏÑúÎπÑÏä§ Í≥ÑÏ†ï Í∂åÌïú Î≥¥Ïû•
# ============================================

ensure_sa_roles() {
    local sa_email=$1
    local project_id=$2

    if [ -z "$sa_email" ] || [ -z "$project_id" ]; then
        return
    fi
    log_info "ÏÑúÎπÑÏä§ Í≥ÑÏ†ï Í∂åÌïú ÌôïÏù∏ Ï§ë: $sa_email"
    # Secret Manager accessor
    gcloud projects add-iam-policy-binding "$project_id" \
        --member="serviceAccount:$sa_email" \
        --role="roles/secretmanager.secretAccessor" \
        --quiet >/dev/null 2>&1 || true

    # Cloud SQL client
    gcloud projects add-iam-policy-binding "$project_id" \
        --member="serviceAccount:$sa_email" \
        --role="roles/cloudsql.client" \
        --quiet >/dev/null 2>&1 || true
}

# ============================================
# Í≥µÌÜµ Ïú†Ìã∏: buildx Î≥¥Ïû• (Î©ÄÌã∞ ÌîåÎû´Ìèº ÎπåÎìúÏö©)
# ============================================
ensure_buildx() {
    if ! docker buildx version >/dev/null 2>&1; then
        log_warning "Docker buildxÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Docker Desktop ÏµúÏã† Î≤ÑÏ†ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
        return
    fi
    if ! docker buildx inspect vcbl-builder >/dev/null 2>&1; then
        docker buildx create --name vcbl-builder --use >/dev/null 2>&1 || true
        docker buildx inspect --bootstrap >/dev/null 2>&1 || true
    else
        docker buildx use vcbl-builder >/dev/null 2>&1 || true
        docker buildx inspect --bootstrap >/dev/null 2>&1 || true
    fi
}

# ============================================
# 3. Î∞∞Ìè¨ Î™®Îìú ÏÑ†ÌÉù
# ============================================

if [ "$QUICK_MODE" = true ]; then
    log_info "Îπ†Î•∏ Î∞∞Ìè¨ Î™®Îìú ÏÑ†ÌÉùÎê®"
    DEPLOY_MODE="quick"
elif [ "$FULL_SETUP" = true ]; then
    log_info "ÏôÑÏ†Ñ ÏÑ§Ï†ï Î™®Îìú ÏÑ†ÌÉùÎê®"
    DEPLOY_MODE="full"
else
    echo ""
    echo "Î∞∞Ìè¨ Î™®ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
    echo "1) Îπ†Î•∏ Î∞∞Ìè¨ (Í∏∞Ï°¥ ÏÑ§Ï†ï ÏÇ¨Ïö©)"
    echo "2) ÏôÑÏ†Ñ ÏÑ§Ï†ï (Ï¥àÍ∏∞ ÏÑ§Ï†ïÎ∂ÄÌÑ∞ Î∞∞Ìè¨ÍπåÏßÄ)"
    echo "3) ÎåÄÌôîÌòï Î™®Îìú (Îã®Í≥ÑÎ≥Ñ ÏÑ†ÌÉù)"
    echo ""
    echo -n "ÏÑ†ÌÉù (1, 2, ÎòêÎäî 3): "
    read DEPLOY_CHOICE
    
    case $DEPLOY_CHOICE in
        1)
            DEPLOY_MODE="quick"
            ;;
        2)
            DEPLOY_MODE="full"
            ;;
        3)
            DEPLOY_MODE="interactive"
            ;;
        *)
            log_error "ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§."
            exit 1
            ;;
    esac
fi

# ============================================
# 4. ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
# ============================================

echo ""
log_info "2. ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï"

# ÌîÑÎ°úÏ†ùÌä∏ ID ÏÑ§Ï†ï
PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
if [ -z "$PROJECT_ID" ]; then
    echo -n "Google Cloud Project IDÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî: "
    read PROJECT_ID
    gcloud config set project $PROJECT_ID
else
    if [ "$DEPLOY_MODE" != "quick" ]; then
        echo -n "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ ID ($PROJECT_ID)Î•º ÏÇ¨Ïö©ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/n): "
        read use_current
        if [ "$use_current" != "y" ]; then
            echo -n "ÏÉàÎ°úÏö¥ Google Cloud Project IDÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî: "
            read PROJECT_ID
            gcloud config set project $PROJECT_ID
        fi
    fi
fi

# Í∏∞Î≥∏ ÏÑ§Ï†ïÍ∞í
REGION="${GCP_REGION:-asia-northeast3}"
SERVICE_NAME="${SERVICE_NAME:-vcbl-chatbot}"

if [ "$DEPLOY_MODE" != "quick" ]; then
    # Î¶¨Ï†Ñ ÏÑ§Ï†ï
    echo -n "Î∞∞Ìè¨Ìï† Î¶¨Ï†ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Í∏∞Î≥∏Í∞í: $REGION): "
    read input_region
    REGION=${input_region:-$REGION}
    
    # ÏÑúÎπÑÏä§ Ïù¥Î¶Ñ ÏÑ§Ï†ï
    echo -n "ÏÑúÎπÑÏä§ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Í∏∞Î≥∏Í∞í: $SERVICE_NAME): "
    read input_service
    SERVICE_NAME=${input_service:-$SERVICE_NAME}
fi

echo -e "${GREEN}Project ID: $PROJECT_ID${NC}"
echo -e "${GREEN}Region: $REGION${NC}"
echo -e "${GREEN}Service Name: $SERVICE_NAME${NC}"

# ============================================
# 5. Îπ†Î•∏ Î∞∞Ìè¨ Î™®Îìú
# ============================================

if [ "$DEPLOY_MODE" = "quick" ]; then
    echo ""
    log_info "3. Îπ†Î•∏ Î∞∞Ìè¨ ÏãúÏûë..."
    
    # Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ≥¥ ÏûÖÎ†•
    echo ""
    echo "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ïó∞Í≤∞ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
    echo "(ÌòïÏãù: PROJECT_ID:REGION:INSTANCE_NAME)"
    read -p "Cloud SQL Instance: " CLOUD_SQL_INSTANCE
    
    # Docker Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ (Artifact Registry ÏÇ¨Ïö©)
    IMAGE_TAG="${REGION}-docker.pkg.dev/${PROJECT_ID}/vcbl-chatbot-repo/${SERVICE_NAME}:latest"

    # buildx Ï§ÄÎπÑ
    ensure_buildx

    # 1. Î©ÄÌã∞ ÌîåÎû´Ìèº Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú (amd64/arm64)
    echo ""
    log_info "1. Î©ÄÌã∞ ÌîåÎû´Ìèº Ïù¥ÎØ∏ÏßÄ ÎπåÎìú/Ìë∏Ïãú Ï§ë (linux/amd64, linux/arm64)..."
    docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE_TAG" --push .
    log_success "Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú ÏôÑÎ£å -> $IMAGE_TAG"
    
    # 2. Ìë∏ÏãúÎäî ÎπåÎìú Ïãú ÏûêÎèôÏúºÎ°ú ÏôÑÎ£åÎê®
    log_success "Ìë∏Ïãú ÏôÑÎ£å"
    
    # 3. Cloud RunÏóê Î∞∞Ìè¨
    echo ""
    log_info "3. Cloud RunÏóê Î∞∞Ìè¨ Ï§ë..."
    
    # Î∞∞Ìè¨Ïö© ÏÑúÎπÑÏä§ Í≥ÑÏ†ï (ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Compute SA ÏÇ¨Ïö©)
    DEPLOY_SA_EMAIL="vcbl-deployer@${PROJECT_ID}.iam.gserviceaccount.com"
    if ! gcloud iam service-accounts describe "$DEPLOY_SA_EMAIL" --project="$PROJECT_ID" >/dev/null 2>&1; then
        PROJECT_NUM=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
        DEPLOY_SA_EMAIL="${PROJECT_NUM}-compute@developer.gserviceaccount.com"
    fi

    ensure_sa_roles "$DEPLOY_SA_EMAIL" "$PROJECT_ID"

    gcloud run deploy "$SERVICE_NAME" \
        --image="$IMAGE_TAG" \
        --region="$REGION" \
        --platform=managed \
        --allow-unauthenticated \
        --memory=1Gi \
        --cpu=1 \
        --min-instances=0 \
        --max-instances=10 \
        --set-env-vars="FLASK_ENV=production" \
        --add-cloudsql-instances="$CLOUD_SQL_INSTANCE" \
        --set-secrets="SECRET_KEY=SECRET_KEY:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,DATABASE_URL=DATABASE_URL:latest" \
        --service-account="$DEPLOY_SA_EMAIL" \
        --project="$PROJECT_ID"
    
    log_success "Î∞∞Ìè¨ ÏôÑÎ£å!"
    
    # ÏÑúÎπÑÏä§ URL Í∞ÄÏ†∏Ïò§Í∏∞
    SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
        --region="$REGION" \
        --project="$PROJECT_ID" \
        --format="value(status.url)")
    
    echo ""
    echo "======================================"
    echo -e "${GREEN}Î∞∞Ìè¨ ÏÑ±Í≥µ!${NC}"
    echo "======================================"
    echo ""
    echo "ÏÑúÎπÑÏä§ URL: $SERVICE_URL"
    echo ""
    echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú Î°úÍ∑∏ ÌôïÏù∏:"
    echo "gcloud run services logs read $SERVICE_NAME --region=$REGION --project=$PROJECT_ID"
    echo ""
    
    exit 0
fi

# ============================================
# 6. ÏôÑÏ†Ñ ÏÑ§Ï†ï Î™®Îìú
# ============================================

if [ "$DEPLOY_MODE" = "full" ]; then
    echo ""
    log_info "3. ÏôÑÏ†Ñ ÏÑ§Ï†ï Î™®Îìú ÏãúÏûë..."
    
    # ÌïÑÏàò API ÌôúÏÑ±Ìôî
    log_info "ÌïÑÏàò Google Cloud API ÌôúÏÑ±Ìôî..."
    APIS=(
        "cloudbuild.googleapis.com"
        "run.googleapis.com"
        "sqladmin.googleapis.com"
        "secretmanager.googleapis.com"
        "containerregistry.googleapis.com"
    )
    
    for api in "${APIS[@]}"; do
        log_info "API ÌôúÏÑ±Ìôî Ï§ë: $api"
        gcloud services enable $api --project=$PROJECT_ID
    done
    
    log_success "API ÌôúÏÑ±Ìôî ÏôÑÎ£å"
    
    # Secret ManagerÏóê ÏãúÌÅ¨Î¶ø Ï†ÄÏû•
    echo ""
    log_info "4. Secret ManagerÏóê ÏãúÌÅ¨Î¶ø Ï†ÄÏû•..."
    
    # Ïú†Ìã∏: ÏãúÌÅ¨Î¶ø Ï°¥Ïû¨ Ïó¨Î∂Ä
    secret_exists() {
        local secret_name=$1
        if gcloud secrets describe "$secret_name" --project="$PROJECT_ID" &>/dev/null; then
            return 0
        else
            return 1
        fi
    }

    # Ïú†Ìã∏: ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± (Í∞íÏùÑ ÌëúÏ§ÄÏûÖÎ†•ÏúºÎ°ú Ï†ÑÎã¨)
    create_secret() {
        local secret_name=$1
        local secret_value=$2
        log_info "ÏãúÌÅ¨Î¶ø $secret_name ÏÉùÏÑ± Ï§ë..."
        echo -n "$secret_value" | gcloud secrets create "$secret_name" --data-file=- --project="$PROJECT_ID"
    }

    # Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Î®ºÏ†Ä ÏûÖÎ†• (ÎÇòÏ§ë Îã®Í≥ÑÏóêÏÑúÎèÑ ÏÇ¨Ïö©)
    echo ""
    log_warning "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§."
    echo "ÌòïÏãù: PROJECT_ID:REGION:INSTANCE_NAME"
    echo -n "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ïó∞Í≤∞ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî: "
    read CLOUD_SQL_INSTANCE

    # SECRET_KEY
    if secret_exists "SECRET_KEY"; then
        log_success "ÏãúÌÅ¨Î¶ø SECRET_KEY Ïù¥ÎØ∏ Ï°¥Ïû¨ ‚Äî ÏûÖÎ†• ÏÉùÎûµ"
    else
        echo -n "SECRET_KEY (Flask ÏãúÌÅ¨Î¶ø ÌÇ§): "
        read -s SECRET_KEY
        echo ""
        create_secret "SECRET_KEY" "$SECRET_KEY"
    fi

    # JWT_SECRET_KEY
    if secret_exists "JWT_SECRET_KEY"; then
        log_success "ÏãúÌÅ¨Î¶ø JWT_SECRET_KEY Ïù¥ÎØ∏ Ï°¥Ïû¨ ‚Äî ÏûÖÎ†• ÏÉùÎûµ"
    else
        echo -n "JWT_SECRET_KEY (JWT ÌÜ†ÌÅ∞ ÏãúÌÅ¨Î¶ø ÌÇ§): "
        read -s JWT_SECRET_KEY
        echo ""
        create_secret "JWT_SECRET_KEY" "$JWT_SECRET_KEY"
    fi

    # OPENAI_API_KEY
    if secret_exists "OPENAI_API_KEY"; then
        log_success "ÏãúÌÅ¨Î¶ø OPENAI_API_KEY Ïù¥ÎØ∏ Ï°¥Ïû¨ ‚Äî ÏûÖÎ†• ÏÉùÎûµ"
    else
        echo -n "OPENAI_API_KEY (OpenAI API ÌÇ§): "
        read -s OPENAI_API_KEY
        echo ""
        create_secret "OPENAI_API_KEY" "$OPENAI_API_KEY"
    fi

    # DATABASE_URL
    if secret_exists "DATABASE_URL"; then
        log_success "ÏãúÌÅ¨Î¶ø DATABASE_URL Ïù¥ÎØ∏ Ï°¥Ïû¨ ‚Äî ÏûÖÎ†• ÏÉùÎûµ"
    else
        echo -n "DB_PASSWORD (Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎπÑÎ∞ÄÎ≤àÌò∏): "
        read -s DB_PASSWORD
        echo ""
        DB_USER="vcbl_user"
        DB_NAME="vcbl_chatbot"
        DATABASE_URL="postgresql+psycopg://${DB_USER}:${DB_PASSWORD}@/${DB_NAME}?host=/cloudsql/${CLOUD_SQL_INSTANCE}"
        create_secret "DATABASE_URL" "$DATABASE_URL"
    fi

    log_success "ÏãúÌÅ¨Î¶ø Ï†ÄÏû• Îã®Í≥Ñ ÏôÑÎ£å"
    
    # Cloud Build Ìä∏Î¶¨Í±∞ ÏÑ§Ï†ï
    echo ""
    log_info "5. Cloud Build Ìä∏Î¶¨Í±∞ ÏÑ§Ï†ï..."
    
    # GitHub Ï†ÄÏû•ÏÜå Ï†ïÎ≥¥ ÏûÖÎ†•
    echo -n "GitHub Ï†ÄÏû•ÏÜå ÏÜåÏú†Ïûê (Ïòà: username): "
    read GITHUB_OWNER
    
    echo -n "GitHub Ï†ÄÏû•ÏÜå Ïù¥Î¶Ñ: "
    read GITHUB_REPO
    
    # Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± Ïó¨Î∂Ä ÌôïÏù∏
    echo -n "Cloud Build Ìä∏Î¶¨Í±∞Î•º ÏÉùÏÑ±Ìï†ÍπåÏöî? (y/n): "
    read CREATE_TRIGGER
    if [ "$CREATE_TRIGGER" = "y" ]; then
        log_info "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± Ï§ë..."
        if gcloud builds triggers create github \
        --name="vcbl-chatbot-trigger" \
        --repo-name=$GITHUB_REPO \
        --repo-owner=$GITHUB_OWNER \
        --branch-pattern='^main$' \
        --build-config=cloudbuild.yaml \
        --project=$PROJECT_ID \
            --substitutions=_REGION=$REGION,_MEMORY=1Gi,_CPU=1,_MIN_INSTANCES=0,_MAX_INSTANCES=10,_CLOUD_SQL_INSTANCE=$CLOUD_SQL_INSTANCE; then
            log_success "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± ÏôÑÎ£å"
        else
            log_warning "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± Ïã§Ìå® ‚Äî ÏΩòÏÜîÏóêÏÑú ÏàòÎèô ÏÑ§Ï†ïÌïòÍ±∞ÎÇò Ïä§ÌÇµÌïòÏÑ∏Ïöî."
        fi
    fi
    
    # Î∞∞Ìè¨ Î∞©Î≤ï ÏÑ†ÌÉù
    echo ""
    echo "Î∞∞Ìè¨ Î∞©Î≤ïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
    echo "1) Cloud Build Ìä∏Î¶¨Í±∞ ÏÇ¨Ïö© (GitHub push Ïãú ÏûêÎèô Î∞∞Ìè¨)"
    echo "2) Î°úÏª¨ÏóêÏÑú Ï¶âÏãú ÎπåÎìú Î∞è Î∞∞Ìè¨"
    echo ""
    echo -n "ÏÑ†ÌÉù (1 ÎòêÎäî 2): "
    read DEPLOY_CHOICE
    
    if [ "$DEPLOY_CHOICE" = "2" ]; then
        log_info "6. Î°úÏª¨ ÎπåÎìú Î∞è Î∞∞Ìè¨ ÏãúÏûë..."
        
        # Docker Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏
        IMAGE_TAG="gcr.io/${PROJECT_ID}/${SERVICE_NAME}:latest"
        
        # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        log_info "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
        docker build -t "$IMAGE_TAG" .
        log_success "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å"
        
        # GCRÏóê Ìë∏Ïãú
        log_info "Google Container RegistryÏóê Ìë∏Ïãú Ï§ë..."
        docker push "$IMAGE_TAG"
        log_success "Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú ÏôÑÎ£å"
        
        # Cloud RunÏóê Î∞∞Ìè¨
        log_info "Cloud RunÏóê Î∞∞Ìè¨ Ï§ë..."
        gcloud run deploy "$SERVICE_NAME" \
            --image="$IMAGE_TAG" \
            --region="$REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="FLASK_ENV=production" \
            --add-cloudsql-instances="$CLOUD_SQL_INSTANCE" \
            --set-secrets="SECRET_KEY=SECRET_KEY:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,DATABASE_URL=DATABASE_URL:latest" \
            --project="$PROJECT_ID"
        
        log_success "Cloud Run Î∞∞Ìè¨ ÏôÑÎ£å"
    fi
fi

# ============================================
# 7. ÎåÄÌôîÌòï Î™®Îìú
# ============================================

if [ "$DEPLOY_MODE" = "interactive" ]; then
    echo ""
    log_info "3. ÎåÄÌôîÌòï Î™®Îìú ÏãúÏûë..."
    
    # Í∞Å Îã®Í≥ÑÎ≥ÑÎ°ú ÏÑ†ÌÉùÌï† Ïàò ÏûàÎèÑÎ°ù Íµ¨ÏÑ±
    echo "Îã§Ïùå Ï§ë Ïã§ÌñâÌï† ÏûëÏóÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
    echo "1) API ÌôúÏÑ±Ìôî"
    echo "2) Secret Manager ÏÑ§Ï†ï"
    echo "3) Cloud Build Ìä∏Î¶¨Í±∞ ÏÑ§Ï†ï"
    echo "4) Î°úÏª¨ ÎπåÎìú Î∞è Î∞∞Ìè¨"
    echo "5) Î™®Îì† ÏûëÏóÖ Ïã§Ìñâ"
    echo ""
    echo -n "ÏÑ†ÌÉù (1-5): "
    read INTERACTIVE_CHOICE
    
    # ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± Ìï®Ïàò (Ï†ÑÏó≠ÏúºÎ°ú Ï†ïÏùò)
    create_secret() {
        local secret_name=$1
        local secret_value=$2
        
        if gcloud secrets describe $secret_name --project=$PROJECT_ID &>/dev/null; then
            log_warning "ÏãúÌÅ¨Î¶ø $secret_nameÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§."
            echo -n "$secret_value" | gcloud secrets versions add $secret_name --data-file=- --project=$PROJECT_ID
        else
            log_info "ÏãúÌÅ¨Î¶ø $secret_name ÏÉùÏÑ± Ï§ë..."
            echo -n "$secret_value" | gcloud secrets create $secret_name --data-file=- --project=$PROJECT_ID
        fi
    }
    
    # API ÌôúÏÑ±Ìôî Ìï®Ïàò
    enable_apis() {
        log_info "ÌïÑÏàò Google Cloud API ÌôúÏÑ±Ìôî..."
        APIS=(
            "cloudbuild.googleapis.com"
            "run.googleapis.com"
            "sqladmin.googleapis.com"
            "secretmanager.googleapis.com"
            "containerregistry.googleapis.com"
        )
        
        for api in "${APIS[@]}"; do
            log_info "API ÌôúÏÑ±Ìôî Ï§ë: $api"
            gcloud services enable $api --project=$PROJECT_ID
        done
        log_success "API ÌôúÏÑ±Ìôî ÏôÑÎ£å"
    }
    
    # Secret Manager ÏÑ§Ï†ï Ìï®Ïàò
    setup_secrets() {
        log_info "Secret Manager ÏÑ§Ï†ï..."
        
        # ÌïÑÏàò ÏãúÌÅ¨Î¶øÎì§ ÏûÖÎ†• Î∞õÍ∏∞
        echo ""
        log_warning "Îã§Ïùå ÏãúÌÅ¨Î¶øÎì§ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÏûÖÎ†•Í∞íÏù¥ ÌôîÎ©¥Ïóê ÌëúÏãúÎêòÏßÄ ÏïäÏäµÎãàÎã§):"
        
        echo -n "SECRET_KEY (Flask ÏãúÌÅ¨Î¶ø ÌÇ§): "
        read -s SECRET_KEY
        echo ""
        
        echo -n "JWT_SECRET_KEY (JWT ÌÜ†ÌÅ∞ ÏãúÌÅ¨Î¶ø ÌÇ§): "
        read -s JWT_SECRET_KEY
        echo ""
        
        echo -n "OPENAI_API_KEY (OpenAI API ÌÇ§): "
        read -s OPENAI_API_KEY
        echo ""
        
        echo -n "DB_PASSWORD (Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎπÑÎ∞ÄÎ≤àÌò∏): "
        read -s DB_PASSWORD
        echo ""
        
        # Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ ÏÑ§Ï†ï
        echo ""
        log_warning "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§."
        echo "ÌòïÏãù: PROJECT_ID:REGION:INSTANCE_NAME"
        echo -n "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ïó∞Í≤∞ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî: "
        read CLOUD_SQL_INSTANCE
        
        # ÏãúÌÅ¨Î¶ø Ï†ÄÏû•
        create_secret "SECRET_KEY" "$SECRET_KEY"
        create_secret "JWT_SECRET_KEY" "$JWT_SECRET_KEY"
        create_secret "OPENAI_API_KEY" "$OPENAI_API_KEY"
        
        # DATABASE_URL ÏÉùÏÑ± Î∞è Ï†ÄÏû•
        DB_USER="vcbl_user"
        DB_NAME="vcbl_chatbot"
        DATABASE_URL="postgresql+psycopg://${DB_USER}:${DB_PASSWORD}@/${DB_NAME}?host=/cloudsql/${CLOUD_SQL_INSTANCE}"
        create_secret "DATABASE_URL" "$DATABASE_URL"
        
        log_success "ÏãúÌÅ¨Î¶ø Ï†ÄÏû• ÏôÑÎ£å"
    }
    
    # Cloud Build Ìä∏Î¶¨Í±∞ ÏÑ§Ï†ï Ìï®Ïàò
    setup_trigger() {
        log_info "Cloud Build Ìä∏Î¶¨Í±∞ ÏÑ§Ï†ï..."
        
        # GitHub Ï†ÄÏû•ÏÜå Ï†ïÎ≥¥ ÏûÖÎ†•
        echo -n "GitHub Ï†ÄÏû•ÏÜå ÏÜåÏú†Ïûê (Ïòà: username): "
        read GITHUB_OWNER
        
        echo -n "GitHub Ï†ÄÏû•ÏÜå Ïù¥Î¶Ñ: "
        read GITHUB_REPO
        
        # Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± ÏãúÎèÑ
        log_info "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± Ï§ë..."
        
        if gcloud builds triggers create github \
            --name="vcbl-chatbot-trigger" \
            --repo-name=$GITHUB_REPO \
            --repo-owner=$GITHUB_OWNER \
            --branch-pattern='^main$' \
            --build-config=cloudbuild.yaml \
            --project=$PROJECT_ID \
            --substitutions=_REGION=$REGION,_MEMORY=1Gi,_CPU=1,_MIN_INSTANCES=0,_MAX_INSTANCES=10,_CLOUD_SQL_INSTANCE=$CLOUD_SQL_INSTANCE 2>/dev/null; then
            log_success "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± ÏôÑÎ£å"
        else
            log_warning "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."
            echo ""
            echo "GitHub Ï†ÄÏû•ÏÜåÍ∞Ä Cloud BuildÏôÄ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§."
            echo "Îã§Ïùå Î∞©Î≤ï Ï§ë ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
            echo ""
            echo "1) Google Cloud ConsoleÏóêÏÑú ÏàòÎèôÏúºÎ°ú GitHub Ïó∞Í≤∞:"
            echo "   https://console.cloud.google.com/cloud-build/triggers?project=$PROJECT_ID"
            echo ""
            echo "2) GitHub Ï†ÄÏû•ÏÜå ÏÑ§Ï†ïÏóêÏÑú Cloud Build Ïï± ÏÑ§Ïπò:"
            echo "   https://github.com/$GITHUB_OWNER/$GITHUB_REPO/settings/installations"
            echo ""
            echo "3) Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎõ∞Í≥† Î°úÏª¨ Î∞∞Ìè¨Îßå ÏßÑÌñâ"
            echo ""
            echo -n "Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎõ∞ÏãúÍ≤†ÏäµÎãàÍπå? (y/n): "
            read skip_trigger
            if [ "$skip_trigger" = "y" ]; then
                log_warning "Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§."
                log_info "ÎÇòÏ§ëÏóê Google Cloud ConsoleÏóêÏÑú ÏàòÎèôÏúºÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
            else
                log_error "Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÏÑ§Ï†ï ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî."
                exit 1
            fi
        fi
    }
    
    # Î°úÏª¨ ÎπåÎìú Î∞è Î∞∞Ìè¨ Ìï®Ïàò
    deploy_local() {
        log_info "Î°úÏª¨ ÎπåÎìú Î∞è Î∞∞Ìè¨..."
        
        # Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ≥¥ ÏûÖÎ†•
        if [ -z "$CLOUD_SQL_INSTANCE" ]; then
            echo ""
            echo "Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§ Ïó∞Í≤∞ Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            echo "(ÌòïÏãù: PROJECT_ID:REGION:INSTANCE_NAME)"
            read -p "Cloud SQL Instance: " CLOUD_SQL_INSTANCE
        fi
        
        # Docker Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏
        IMAGE_TAG="gcr.io/${PROJECT_ID}/${SERVICE_NAME}:latest"
        
        # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        log_info "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
        docker build -t "$IMAGE_TAG" .
        log_success "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å"
        
        # GCRÏóê Ìë∏Ïãú
        log_info "Google Container RegistryÏóê Ìë∏Ïãú Ï§ë..."
        docker push "$IMAGE_TAG"
        log_success "Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú ÏôÑÎ£å"
        
        # Cloud RunÏóê Î∞∞Ìè¨
        log_info "Cloud RunÏóê Î∞∞Ìè¨ Ï§ë..."
        gcloud run deploy "$SERVICE_NAME" \
            --image="$IMAGE_TAG" \
            --region="$REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="FLASK_ENV=production,PORT=8080INIT_ADMIN_ON_START=true,ADMIN_STUDENT_ID=9999000001,ADMIN_NAME=Super Administrator,ADMIN_PASSWORD:ADMIN_PASSWORD:latest" \
            --add-cloudsql-instances="$CLOUD_SQL_INSTANCE" \
            --set-secrets="SECRET_KEY=SECRET_KEY:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,DATABASE_URL=DATABASE_URL:latest" \
            --project="$PROJECT_ID"
        
        log_success "Cloud Run Î∞∞Ìè¨ ÏôÑÎ£å"
    }
    
    case $INTERACTIVE_CHOICE in
        1)
            enable_apis
            ;;
        2)
            setup_secrets
            ;;
        3)
            setup_trigger
            ;;
        4)
            deploy_local
            ;;
        5)
            # Î™®Îì† ÏûëÏóÖ Ïã§Ìñâ
            enable_apis
            setup_secrets
            setup_trigger
            deploy_local
            ;;
    esac
fi

# ============================================
# 8. Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
# ============================================

echo ""
log_info "Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏..."

# ÏÑúÎπÑÏä§ URL Í∞ÄÏ†∏Ïò§Í∏∞
SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
    --region="$REGION" \
    --project="$PROJECT_ID" \
    --format="value(status.url)" 2>/dev/null || echo "")

if [ -n "$SERVICE_URL" ]; then
    log_success "Î∞∞Ìè¨ ÏÑ±Í≥µ!"
    echo ""
    echo "============================================"
    echo "üéâ Î∞∞Ìè¨ ÏôÑÎ£å!"
    echo "============================================"
    echo ""
    echo "ÏÑúÎπÑÏä§ URL: $SERVICE_URL"
    echo ""
    echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú Î°úÍ∑∏ ÌôïÏù∏:"
    echo "gcloud run services logs read $SERVICE_NAME --region=$REGION --project=$PROJECT_ID"
    echo ""
    echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏:"
    echo "gcloud run services describe $SERVICE_NAME --region=$REGION --project=$PROJECT_ID"
else
    log_warning "ÏÑúÎπÑÏä§ URLÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÌôïÏù∏ÌïòÏÑ∏Ïöî."
fi

# ============================================
# 9. Ï∂îÍ∞Ä ÏÑ§Ï†ï ÏïàÎÇ¥
# ============================================

echo ""
log_info "Ï∂îÍ∞Ä ÏÑ§Ï†ï ÏïàÎÇ¥"
echo "============================================"
echo ""
echo "‚úÖ ÏôÑÎ£åÎêú ÏûëÏóÖ:"
if [ "$DEPLOY_MODE" = "full" ] || [ "$INTERACTIVE_CHOICE" = "5" ]; then
    echo "   - Google Cloud API ÌôúÏÑ±Ìôî"
    echo "   - Secret ManagerÏóê ÏãúÌÅ¨Î¶ø Ï†ÄÏû•"
    echo "   - Cloud Build Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±"
fi
echo "   - Cloud Run ÏÑúÎπÑÏä§ Î∞∞Ìè¨"
echo ""
echo "üìã Ï∂îÍ∞ÄÎ°ú ÌôïÏù∏Ìï¥Ïïº Ìï† ÏÇ¨Ìï≠:"
echo "   1. Cloud SQL Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏"
echo "   2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ (ÌïÑÏöîÏãú)"
echo "   3. ÎèÑÎ©îÏù∏ ÏÑ§Ï†ï (ÌïÑÏöîÏãú)"
echo "   4. SSL Ïù∏Ï¶ùÏÑú ÏÑ§Ï†ï (HTTPS ÏÇ¨Ïö©Ïãú)"
echo "   5. Î™®ÎãàÌÑ∞ÎßÅ Î∞è ÏïåÎ¶º ÏÑ§Ï†ï"
echo ""
echo "üîß Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥Îì§:"
echo "   - ÏÑúÎπÑÏä§ Î°úÍ∑∏: gcloud run services logs read $SERVICE_NAME --region=$REGION"
echo "   - ÏÑúÎπÑÏä§ ÏÉÅÌÉú: gcloud run services describe $SERVICE_NAME --region=$REGION"
echo "   - Ìä∏Î¶¨Í±∞ Î™©Î°ù: gcloud builds triggers list"
echo "   - ÎπåÎìú ÌûàÏä§ÌÜ†Î¶¨: gcloud builds list"
echo ""

log_success "Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ ÏôÑÎ£å!"
