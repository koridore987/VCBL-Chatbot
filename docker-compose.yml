# ============================================
# VCBL Chatbot - 로컬 전체 테스트용 Docker Compose
# ============================================
# 이 파일은 로컬에서 전체 애플리케이션을 테스트하기 위한 것입니다.
# 로컬 개발은 ./start-backend.sh, ./start-frontend.sh를 사용하세요.

services:
  # PostgreSQL 데이터베이스 (로컬 테스트용)
  db:
    image: postgres:15-alpine
    container_name: vcbl-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vcbl_chatbot
      POSTGRES_USER: vcbl_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vcbl_dev_password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vcbl_user -d vcbl_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Rate Limiting용 - 로컬 테스트용)
  redis:
    image: redis:7-alpine
    container_name: vcbl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 애플리케이션 (로컬 전체 테스트용)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: vcbl-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # PostgreSQL 연결 (docker-compose 네트워크)
      DATABASE_URL: postgresql+psycopg://vcbl_user:${DB_PASSWORD:-vcbl_dev_password}@db:5432/vcbl_chatbot
      
      # Redis 연결 (선택사항)
      REDIS_URL: redis://redis:6379/0
      
      # 보안 (로컬 테스트용 - 실제 배포는 Secret Manager 사용)
      SECRET_KEY: ${SECRET_KEY:-test-secret-key-for-local-testing}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-test-jwt-secret-key-for-local-testing}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_NAME: ${MODEL_NAME:-gpt-4o-mini}
      SUMMARY_TRIGGER_TOKENS: ${SUMMARY_TRIGGER_TOKENS:-3500}
      MAX_TOKENS_PER_REQUEST: ${MAX_TOKENS_PER_REQUEST:-4000}
      MAX_TOKENS_OUTPUT: ${MAX_TOKENS_OUTPUT:-1000}
      DAILY_TOKEN_LIMIT: ${DAILY_TOKEN_LIMIT:-50000}
      
      # 서버 설정
      PORT: 8080
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_APP: run.py
      INIT_ADMIN_ON_START: ${INIT_ADMIN_ON_START:-true}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:?Set ADMIN_PASSWORD in .env}
      
      # CORS 설정
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000}
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
